--I- -- 		I: IMPORT files	00:00.000	00:00.000	00:00.000		I	This script will allow you to choose multiple audio, video and MIDI files and add them to the workspace as new cues; the original files will be copied to the appropriate subfolder next to the workspace, unless they already exist there (in which case the existing files will be used); the script can be adjusted to enforce copying only for non-local files, eg: those on network serversset userCopyOnImport to true -- Set this to false if you do not want the files to be copied to the workspace folderset userForceCopyFromNetwork to true -- Set this to false if you do not want files that aren't on local drives to be copied automaticallyset userReassuranceThreshold to 5 -- When the number of files imported is greater than this variable, a dialog will let you know that the process is complete-- ###FIXME### Should audioFileTypes include "public.ulaw-audio"?-- ###FIXME### Is videoFileTypes a sufficiently exhaustive list? Are any of the file types not supported by QLab?-- Declarationsglobal dialogTitle, sharedPathset dialogTitle to "Import files"set audioFileTypes to {"com.apple.coreaudio-format", "com.apple.m4a-audio", "com.microsoft.waveform-audio", "public.aifc-audio", "public.aiff-audio", Â	"public.audio", "public.mp3", "public.mpeg-4-audio"} -- This list deliberately excludes "com.apple.protected-mpeg-4-audio" to protect against(* old DRM-restricted iTunes files *)set videoFileTypes to {"com.adobe.photoshop-image", "com.apple.icns", "com.apple.macpaint-image", "com.apple.pict", "com.apple.quicktime-image", Â	"com.apple.quicktime-movie", "public.3gpp", "public.3gpp2", "public.avi", "public.camera-raw-image", "public.image", "public.jpeg", "public.jpeg-2000", Â	"public.movie", "public.mpeg", "public.mpeg-4", "public.png", "public.tiff", "public.video", "public.xbitmap-image"}set midiFileTypes to {"public.midi-audio"}(* cf: https://developer.apple.com/library/content/documentation/Miscellaneous/Reference/UTIRef/Articles/System-DeclaredUniformTypeIdentifiers.html *)set theFileTypes to {audioFileTypes, videoFileTypes, midiFileTypes}set foldersExist to {null, null, null}set theSubfolders to {"audio", "video", "midi file"}set theCueTypes to {"Audio", "Video", "MIDI File"}-- Main routinetell application id "com.figure53.QLab.4" to tell front workspace		-- Establish the path to the current workspace		set workspacePath to path	if workspacePath is missing value then		display dialog "The current workspace has not yet been saved anywhere." with title dialogTitle with icon 0 Â			buttons {"OK"} default button "OK" giving up after 5		return	end if		-- Get the path that should prefix all media file paths		tell application "System Events"		set sharedPath to path of container of file workspacePath	end tell		-- Choose the files to import		set newTargets to choose file of type {"public.image", "public.audiovisual-content"} Â		with prompt "Please select one or more audio, video or MIDI files:" with multiple selections allowed		-- Import them		repeat with eachFile in newTargets				tell application "System Events"			set eachType to type identifier of eachFile			set eachName to name of eachFile			if userForceCopyFromNetwork is true then -- Only check file's locality if it will be relevant				set fileIsLocal to local volume of disk (volume of eachFile)			else				set fileIsLocal to true			end if		end tell				set eachTarget to eachFile -- This variable will be updated if the file is copied				-- Work through the three types of cues that will be processed				repeat with i from 1 to 3						if eachType is in contents of item i of theFileTypes then								if (userCopyOnImport is true) or (userForceCopyFromNetwork is true and fileIsLocal is false) then										-- If copying is specified by the user definitions thenÉ										-- Check for appropriate subfolder next to workspace and make it if it doesn't exist										if item i of foldersExist is null then						set item i of foldersExist to my checkForFolder(item i of theSubfolders)						if item i of foldersExist is false then							my makeFolder(item i of theSubfolders)						end if					end if										-- If the file is not already in place, copy it to the appropriate subfolder										if my checkForFile(item i of theSubfolders, eachName) is false then						my copyFileViaFinder(item i of theSubfolders, eachFile)					end if										set eachTarget to sharedPath & item i of theSubfolders & ":" & eachName									end if								-- Make an appropriate cue								make type item i of theCueTypes				set newCue to last item of (selected as list)				set file target of newCue to eachTarget								exit repeat							end if					end repeat			end repeat	end tellif (count newTargets) > userReassuranceThreshold then	display dialog "Done." with title dialogTitle with icon 1 buttons {"OK"} default button "OK" giving up after 5end if-- Subroutines(* === FILE WRANGLING === *)on checkForFile(theSuffix, theName) -- [Shared subroutine]	tell application "System Events"		return exists file (sharedPath & theSuffix & ":" & theName)	end tellend checkForFileon checkForFolder(theSuffix) -- [Shared subroutine]	tell application "System Events"		return exists folder (sharedPath & theSuffix)	end tellend checkForFolderon makeFolder(theFolder) -- [Shared subroutine]	tell application "Finder"		make new folder at sharedPath with properties {name:theFolder}	end tellend makeFolderon copyFileViaFinder(theSuffix, theFile)	(* NB: by using the Finder the usual file-copy progress window is invoked, which may be more reassuring than the faceless	'do shell script "cp -p " & quoted form of POSIX path of theFile & " " & quoted form of POSIX path of (sharedPath & theSuffix & ":" & theName)'	- which may look like a freeze (the -p flag copies every property of a file; "theName" would need to be passed to the subroutine to implement this) *)	tell application "Finder"		duplicate theFile to folder (sharedPath & theSuffix)	end tellend copyFileViaFinder